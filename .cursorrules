# Cursor Rules for Remote Terminal MCP Project

## 强制性回归测试要求

### 质量门禁
- 每修复一个问题后，必须无条件执行全量回归测试执行
- 没有回归测试的修复不允许提交
- 回归测试失败的代码不允许合并
- 测试先行原则

### 项目概述
这是一个用于远程终端管理的模块化控制协议(MCP)服务器，提供服务器配置、连接管理和Docker环境设置工具。

## 代码风格和标准
- 使用Python 3.9+语法和功能
- 遵循PEP 8风格指南
- 在适当的地方使用类型提示
- 为所有公共函数和类编写全面的文档字符串
- 使用有意义的变量和函数名

## 测试要求和测试管理策略

### 测试分类和命名规范
- **临时测试文件**: `test_临时用途_功能.py` - 快速验证新功能或修复问题，完成后删除
- **正式测试文件**: `test_功能名称.py` 或 `test_功能名称_增强.py` - 长期维护的测试
- **测试类命名**: `Test功能模块` - 使用描述性的测试类名
- **测试方法命名**: `test_具体功能_场景` - 清晰描述测试场景

### 测试整合策略
- **新功能测试**: 开发完成后必须将临时测试整合到正式测试套件
- **问题修复测试**: 修复问题后必须保留相关测试用例防止回归
- **边界条件测试**: 发现边界条件时必须添加相应测试
- **集成测试**: 多组件交互必须有集成测试覆盖

### 测试整合流程
1. **分析临时测试价值** - 评估覆盖范围、稳定性和重复性
2. **重构测试代码** - 使用pytest框架，添加测试类和描述性方法名
3. **集成到正式套件** - 放置在合适目录，确保独立运行
4. **更新测试文档** - 记录新增测试用例和覆盖率变化

### 测试文件组织
```
tests/
├── tool_add_server_config/
│   ├── test_docker_config.py              # 基础功能测试
│   ├── test_docker_config_enhanced.py     # 增强功能测试
│   └── test_interaction.py                # 交互功能测试
├── tool_connect_server/
│   └── ...                                # 连接相关测试
└── utils/
    └── ...                                # 工具函数测试
```

### 测试质量标准
- **独立性**: 每个测试必须能够独立运行
- **可重复性**: 测试结果必须稳定可重复
- **清晰性**: 测试代码必须清晰易懂
- **完整性**: 必须覆盖所有重要场景

### 测试覆盖率要求
- **功能测试**: 所有新功能必须有对应测试用例
- **回归测试**: 修复问题后必须有回归测试
- **边界测试**: 重要边界条件必须有测试覆盖
- **错误处理**: 错误情况必须有相应测试

### 测试开发规范
- 所有新功能必须有相应的测试
- 使用pytest作为测试框架
- 在测试中模拟用户交互以确保自动化
- 保持关键功能的测试覆盖率
- 使用描述性测试名称来解释被测试的场景
- 临时测试完成后必须评估是否整合到正式测试套件

## 质量保证
- 回归测试必须覆盖所有关键功能
- 质量保证流程必须严格执行
- 测试先行原则必须遵守
- 代码质量门禁必须通过
- 测试失败时阻止代码合并
- 持续监控测试覆盖率变化

## 文件组织
- 将相关功能保存在适当的模块中
- 在配置、交互和业务逻辑之间使用清晰的分离
- 保持一致的导入结构
- 在适当的测试目录中分组相关测试
- 临时测试文件放在项目根目录，正式测试文件放在tests目录

## 错误处理
- 提供有意义的错误消息
- 使用适当的异常类型
- 优雅地处理边缘情况
- 适当记录错误以便调试

## 文档
- 保持README文件最新
- 记录配置格式和选项
- 提供清晰的使用示例
- 维护版本跟踪的变更日志
- 更新测试文档和覆盖率报告

## 安全考虑
- 永远不要记录密码等敏感信息
- 验证所有用户输入
- 为配置使用安全默认值
- 小心处理身份验证凭据

## 性能指南
- 在交互场景中优化用户体验
- 最小化不必要的文件I/O操作
- 为配置管理使用高效的数据结构
- 考虑缓存频繁访问的数据
- 优化测试执行性能

## 集成指南
- 确保MCP协议合规性
- 在可能的情况下保持向后兼容性
- 测试与各种MCP客户端的集成
- 清楚地记录集成要求

## 自动化推进代码改动
1. 修改代码
2. 自动编译项目
3. 分析编译错误（如果有）
4. 修复编译问题
5. 重复步骤多遍直到编译成功
6. 提供修改说明到相关文档
7. **新增**: 评估临时测试是否需要整合到正式测试套件
