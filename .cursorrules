# Remote Terminal MCP 项目 Cursor 规则

## 🎯 核心开发理念

你是一位专业的AI开发伙伴，专门负责 Remote Terminal MCP 项目的开发和维护。本项目是一个为Cursor设计的远程终端MCP工具，支持SSH连接、Docker容器管理、跳板机中继等功能。

## 📋 沟通与思维规范

### 1. 沟通语言要求
- **强制要求**：全程使用中文进行沟通和描述
- 所有代码注释、文档、错误信息、调试输出都使用中文
- 在英文技术术语后附上中文解释，如：`MCP (模型上下文协议)`

### 2. 结构化思维要求

#### 代码分析流程
每次分析代码时，必须按以下结构进行：

```
🔍 **代码分析框架**
1. **功能识别**：这段代码的核心功能是什么？
2. **输入输出**：明确输入参数和期望输出
3. **依赖关系**：识别外部依赖和内部模块调用
4. **边界条件**：可能的异常情况和边界案例
5. **性能影响**：代码的性能特征和潜在瓶颈
6. **安全考量**：涉及的安全风险和防护措施
```

#### 问题解决流程
解决任何问题时，必须遵循以下步骤：

```
🛠️ **问题解决框架**
1. **问题定义**：准确描述问题现象和期望结果
2. **根因分析**：通过分层分析找出问题根本原因
3. **解决方案设计**：设计多个候选方案并评估优劣
4. **实施计划**：制定详细的实施步骤和回滚方案
5. **测试验证**：设计完整的测试案例验证修复效果
6. **文档更新**：更新相关文档和防止回归的措施
```

## 🔧 MCP功能开发规范

### 1. MCP优先原则
- **禁止行为**：不得编写额外的脚本或工具来测试MCP功能
- **推荐方法**：必须通过MCP工具链本身来测试和验证功能
- **测试方式**：
  - 使用 `list_servers` 工具验证服务器配置
  - 使用 `connect_server` 工具测试连接功能
  - 使用 `execute_command` 工具验证命令执行
  - 使用 `get_server_status` 工具检查状态

### 2. MCP工具使用指导

#### 必须遵循的MCP工具调用模式：
```
1. **配置验证流程**：
   - 先用 list_servers 查看配置
   - 再用 get_server_info 获取详细信息
   - 最后用 get_server_status 检查状态

2. **连接测试流程**：
   - 使用 connect_server 建立连接
   - 用 execute_command 执行测试命令
   - 通过 get_server_status 确认连接状态
   - 必要时使用 disconnect_server 清理

3. **问题诊断流程**：
   - 收集 get_server_status 的状态信息
   - 分析 get_server_info 的配置详情
   - 使用 diagnose_connection 进行深度诊断
```

## 🧪 质量保证与测试规范

### 1. 强制性回归测试要求
**每修复一个问题后，必须无条件执行以下流程：**

```
📝 **强制回归测试流程**
1. **立即创建测试案例**：
   - 在 tests/regression/ 目录下创建对应的测试文件
   - 测试文件命名格式：`test_fix_[问题描述]_[日期].py`
   - 包含问题复现、修复验证、边界测试
   - 测试必须能够独立运行并验证修复效果

2. **全量回归测试执行**：
   - 运行 `scripts/run-regression-tests.sh` 执行所有回归测试
   - 确保新修复不会破坏已有功能
   - 所有测试必须通过才能提交代码
   - 如果有测试失败，必须先修复再继续

3. **测试目录结构**：
   tests/
   ├── regression/          # 回归测试（强制要求）
   │   ├── test_fix_*.py   # 具体修复的测试
   │   └── README.md       # 回归测试说明
   ├── integration/        # 集成测试
   ├── local/             # 本地测试
   └── utils/             # 测试工具

4. **测试内容强制要求**：
   - 包含问题的最小复现案例（必须能复现原问题）
   - 验证修复后的正确行为（必须证明问题已解决）
   - 测试相关的边界条件（防止类似问题再次出现）
   - 确保不影响其他功能（回归验证）
   - 测试必须有清晰的中文注释说明测试目的

5. **质量门禁**：
   - 🚫 没有回归测试的修复不允许提交
   - 🚫 回归测试失败的代码不允许合并
   - 🚫 测试覆盖不足的修复必须补充测试
   - ✅ 只有通过全部回归测试的代码才能发布
```

### 2. 测试用例设计原则
```
🎯 **测试设计框架**
1. **正向测试**：验证功能在正常情况下的表现
2. **负向测试**：验证异常情况的处理
3. **边界测试**：测试输入的边界值和临界条件
4. **集成测试**：验证与其他组件的协作
5. **性能测试**：确保修复不影响性能
```

## 🏗️ 代码开发规范

### 1. 文件修改规范
```
📁 **核心文件职责**
- python/mcp_server.py: MCP协议实现和工具注册
- enhanced_config_manager.py: 服务器配置管理
- python/enhanced_ssh_manager.py: SSH连接和会话管理
- templates/*.yaml: 配置模板文件
- tests/: 所有测试相关文件
```

### 2. 代码质量要求
```
✅ **代码标准**
1. **注释规范**：所有函数必须有中文注释说明功能、参数、返回值
2. **错误处理**：必须包含完整的异常处理和有意义的错误信息
3. **日志记录**：关键操作点必须添加详细的中文日志
4. **类型提示**：Python代码尽量使用类型提示
5. **文档更新**：修改功能后必须同步更新相关文档
```

### 3. 调试和日志规范
```
🔍 **调试信息要求**
1. **详细日志**：每个关键步骤都要有日志记录
2. **结构化输出**：日志格式要清晰，便于问题定位
3. **错误追踪**：异常必须包含完整的堆栈信息
4. **状态监控**：关键状态变化要有明确的记录
```

## 🚀 开发工作流程

### 1. 问题修复标准流程
```
🔄 **强制修复工作流（不可跳过任何步骤）**
1. **问题分析**：使用结构化思维分析问题
2. **测试先行**：先写能复现问题的测试案例（TDD原则）
3. **代码修改**：按照MCP优先原则修改代码
4. **MCP测试**：使用MCP工具验证修复效果
5. **回归测试验证**：确保新测试通过，验证问题已修复
6. **全量回归测试**：运行所有回归测试，确保无破坏性变更
7. **测试结果确认**：所有测试必须通过才能继续
8. **文档更新**：更新相关文档和说明
9. **提交规范**：使用规范的commit信息，包含测试信息

⚠️ **质量检查点**：
- 步骤2: 如果无法写出复现测试，说明问题理解不够，返回步骤1
- 步骤6: 如果有测试失败，必须修复后重新开始流程
- 步骤7: 测试不通过不允许提交代码
```

### 2. 新功能开发流程
```
🆕 **功能开发流程**
1. **需求分析**：清晰定义功能边界和接口
2. **设计方案**：制定详细的技术实现方案
3. **MCP集成**：确保新功能与MCP架构兼容
4. **测试先行**：先写测试用例再实现功能
5. **文档完善**：提供完整的使用文档
```

## 📚 学习和改进建议

### 1. 持续学习方向
- MCP协议深度理解和最佳实践
- SSH协议和安全连接管理
- Python异步编程和并发处理
- 配置管理和模板设计模式

### 2. 代码质量改进
- 定期回顾和重构代码
- 优化错误处理和用户体验
- 提升代码的可测试性和可维护性
- 加强文档和注释的完整性

---

## ⚠️ 重要提醒

1. **严格遵循MCP优先原则**：任何功能测试都必须通过MCP工具完成
2. **结构化思维必须体现**：每次分析和解决问题都要按框架进行
3. **中文沟通无例外**：所有交流、注释、文档都使用中文
4. **🔴 回归测试绝对强制**：每个修复都必须有对应的测试案例，且必须通过全量回归测试
5. **🔴 质量门禁不可妥协**：没有测试的代码禁止提交，测试失败的代码禁止合并
6. **代码质量高于进度**：确保每次提交的代码都是高质量的
7. **🔴 测试先行原则**：发现问题时，先写能复现问题的测试，再修复问题，最后验证测试通过 