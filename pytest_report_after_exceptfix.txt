/Users/xuyehua/Library/Python/3.9/lib/python/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform darwin -- Python 3.9.6, pytest-8.3.5, pluggy-1.5.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3
cachedir: .pytest_cache
rootdir: /Users/xuyehua/Code/remote-terminal-mcp
plugins: anyio-4.9.0, cov-6.1.1, asyncio-1.0.0
asyncio: mode=strict, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 208 items

python/tests/config_manager/test_io.py::TestConfigIO::test_dummy PASSED  [  0%]
python/tests/tool_connect_server/test_connection_manager_integration.py::test_integration_imports PASSED [  0%]
python/tests/tool_connect_server/test_connection_manager_integration.py::test_manager_creation PASSED [  1%]
python/tests/tool_connect_server/test_connection_manager_integration.py::test_api_backward_compatibility PASSED [  1%]
python/tests/tool_connect_server/test_connection_manager_integration.py::test_mcp_server_compatibility PASSED [  2%]
python/tests/tool_connect_server/test_connection_manager_integration.py::test_simple_mode_parameter PASSED [  2%]
python/tests/tool_connect_server/test_end_to_end.py::test_environment PASSED [  3%]
python/tests/tool_connect_server/test_end_to_end.py::TestEndToEndWorkflow::test_complete_server_setup_workflow FAILED [  3%]
python/tests/tool_connect_server/test_end_to_end.py::TestEndToEndWorkflow::test_docker_setup_workflow FAILED [  4%]
python/tests/tool_connect_server/test_end_to_end.py::TestEndToEndWorkflow::test_mcp_integration_workflow FAILED [  4%]
python/tests/tool_connect_server/test_end_to_end.py::TestUserScenarios::test_configuration_migration_scenario FAILED [  5%]
python/tests/tool_connect_server/test_end_to_end.py::TestUserScenarios::test_multiple_servers_scenario FAILED [  5%]
python/tests/tool_connect_server/test_end_to_end.py::TestUserScenarios::test_new_user_setup_scenario FAILED [  6%]
python/tests/tool_connect_server/test_end_to_end.py::TestErrorHandling::test_invalid_config_handling FAILED [  6%]
python/tests/tool_connect_server/test_end_to_end.py::TestErrorHandling::test_permission_error_handling PASSED [  7%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_applescript_terminal_cleanup_integration PASSED [  7%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_complete_applescript_sequence PASSED [  8%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_complete_expect_sequence PASSED [  8%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_comprehensive_test_with_process_management PASSED [  9%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_error_handling_in_process_management PASSED [  9%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_process_cleanup_functionality PASSED [ 10%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_process_tracking_mechanism PASSED [ 10%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_remaining_process_detection PASSED [ 11%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_temp_file_cleanup_integration PASSED [ 11%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_terminal_cleanup_functionality PASSED [ 12%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestCompleteInteractionAndProcessManagement::test_timeout_handling_in_interactions PASSED [ 12%]
python/tests/tool_connect_server/test_fix_complete_interaction_and_process_management_20241222.py::TestInteractionSequenceCompleteness::test_all_required_interaction_steps PASSED [ 12%]
python/tests/tool_connect_server/test_fix_interactive_interface_startup_20241222.py::TestInteractiveInterfaceStartupFix::test_automated_interaction_compatibility PASSED [ 13%]
python/tests/tool_connect_server/test_fix_interactive_interface_startup_20241222.py::TestInteractiveInterfaceStartupFix::test_create_server_config_response_format PASSED [ 13%]
python/tests/tool_connect_server/test_fix_interactive_interface_startup_20241222.py::TestInteractiveInterfaceStartupFix::test_manual_command_execution PASSED [ 14%]
python/tests/tool_connect_server/test_fix_interactive_interface_startup_20241222.py::TestInteractiveInterfaceStartupFix::test_no_background_process_started PASSED [ 14%]
python/tests/tool_connect_server/test_fix_interactive_interface_startup_20241222.py::TestInteractiveInterfaceStartupFix::test_response_consistency PASSED [ 15%]
python/tests/tool_connect_server/test_fix_interactive_interface_startup_20241222.py::TestInteractiveInterfaceStartupFix::test_user_guidance_completeness PASSED [ 15%]
python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py::TestInteractiveStartupRequirement::test_create_server_config_must_start_interactive_interface FAILED [ 16%]
python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py::TestInteractiveStartupRequirement::test_interactive_startup_failure_diagnosis FAILED [ 16%]
python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py::TestInteractiveStartupRequirement::test_interactive_startup_with_minimal_params FAILED [ 17%]

=================================== FAILURES ===================================
___________ TestEndToEndWorkflow.test_complete_server_setup_workflow ___________

self = <python.tests.tool_connect_server.test_end_to_end.TestEndToEndWorkflow testMethod=test_complete_server_setup_workflow>

    def test_complete_server_setup_workflow(self):
        """测试完整的服务器设置工作流程"""
        with test_environment() as env:
            # 1. 创建配置管理器
            from config_manager.main import EnhancedConfigManager
    
>           config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_end_to_end.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x104e6e040>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
_______________ TestEndToEndWorkflow.test_docker_setup_workflow ________________

self = <python.tests.tool_connect_server.test_end_to_end.TestEndToEndWorkflow testMethod=test_docker_setup_workflow>

    def test_docker_setup_workflow(self):
        """测试Docker设置工作流程"""
        with test_environment() as env:
            # 1. 创建Docker配置管理器
            from docker_config_manager import DockerConfigManager
            from config_manager.main import EnhancedConfigManager
    
            docker_manager = DockerConfigManager()
>           config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_end_to_end.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x104e73130>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
______________ TestEndToEndWorkflow.test_mcp_integration_workflow ______________

self = <python.tests.tool_connect_server.test_end_to_end.TestEndToEndWorkflow testMethod=test_mcp_integration_workflow>

    def test_mcp_integration_workflow(self):
        """测试MCP集成工作流程"""
        try:
            # 1. 导入MCP服务器模块
            import mcp_server
    
            # 2. 测试工具列表创建
            tools = mcp_server.create_tools_list()
            self.assertIsNotNone(tools, "MCP工具列表创建成功")
            self.assertGreater(len(tools), 0, "应该有可用的MCP工具")
    
            # 3. 测试配置管理器集成
            from config_manager.main import EnhancedConfigManager
>           config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_end_to_end.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x1060042b0>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError

During handling of the above exception, another exception occurred:

self = <python.tests.tool_connect_server.test_end_to_end.TestEndToEndWorkflow testMethod=test_mcp_integration_workflow>

    def test_mcp_integration_workflow(self):
        """测试MCP集成工作流程"""
        try:
            # 1. 导入MCP服务器模块
            import mcp_server
    
            # 2. 测试工具列表创建
            tools = mcp_server.create_tools_list()
            self.assertIsNotNone(tools, "MCP工具列表创建成功")
            self.assertGreater(len(tools), 0, "应该有可用的MCP工具")
    
            # 3. 测试配置管理器集成
            from config_manager.main import EnhancedConfigManager
            config_manager = EnhancedConfigManager()
    
            # 4. 验证配置目录一致性
            config_path = config_manager.io.config_path
            self.assertTrue(str(config_path).endswith('.remote-terminal/config.yaml'),
                           "MCP集成应该使用正确的配置目录")
    
        except Exception as e:
>           self.fail(f"MCP集成工作流程失败: {e}")
E           AssertionError: MCP集成工作流程失败: name 'kwargs' is not defined

python/tests/tool_connect_server/test_end_to_end.py:120: AssertionError
___________ TestUserScenarios.test_configuration_migration_scenario ____________

self = <python.tests.tool_connect_server.test_end_to_end.TestUserScenarios testMethod=test_configuration_migration_scenario>

    def test_configuration_migration_scenario(self):
        """测试配置迁移场景"""
        with test_environment() as env:
            # 模拟从旧配置目录迁移的场景
            from config_manager.main import EnhancedConfigManager
    
>           config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_end_to_end.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x104e6e370>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
_______________ TestUserScenarios.test_multiple_servers_scenario _______________

self = <python.tests.tool_connect_server.test_end_to_end.TestUserScenarios testMethod=test_multiple_servers_scenario>

    def test_multiple_servers_scenario(self):
        """测试多服务器管理场景"""
        with test_environment() as env:
            from config_manager.main import EnhancedConfigManager
    
>           config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_end_to_end.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x104e6c970>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
________________ TestUserScenarios.test_new_user_setup_scenario ________________

self = <python.tests.tool_connect_server.test_end_to_end.TestUserScenarios testMethod=test_new_user_setup_scenario>

    def test_new_user_setup_scenario(self):
        """测试新用户设置场景"""
        with test_environment() as env:
            # 模拟新用户首次使用
            from config_manager.main import EnhancedConfigManager
    
>           config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_end_to_end.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x1060632b0>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
________________ TestErrorHandling.test_invalid_config_handling ________________

self = <python.tests.tool_connect_server.test_end_to_end.TestErrorHandling testMethod=test_invalid_config_handling>

    def test_invalid_config_handling(self):
        """测试无效配置处理"""
        from config_manager.main import EnhancedConfigManager
    
>       config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_end_to_end.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x106069400>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
_ TestInteractiveStartupRequirement.test_create_server_config_must_start_interactive_interface _

self = <python.tests.tool_connect_server.test_fix_interactive_startup_requirement_20241222.TestInteractiveStartupRequirement testMethod=test_create_server_config_must_start_interactive_interface>

    def setUp(self):
        """测试前准备"""
        # 自动创建最小化配置文件
        config_file = Path.home() / '.remote-terminal' / 'config.yaml'
        config_file.parent.mkdir(parents=True, exist_ok=True)
        if not config_file.exists():
            config_file.write_text('servers: {}\n', encoding='utf-8')
        # 同步创建项目根目录 config/servers.local.yaml
        import os
        project_root = Path(__file__).parent.parent.parent
        config_dir = project_root / 'config'
        config_dir.mkdir(parents=True, exist_ok=True)
        servers_local = config_dir / 'servers.local.yaml'
        servers_local.write_text('servers: {}\n', encoding='utf-8')
>       self.config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x10614c280>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
_ TestInteractiveStartupRequirement.test_interactive_startup_failure_diagnosis _

self = <python.tests.tool_connect_server.test_fix_interactive_startup_requirement_20241222.TestInteractiveStartupRequirement testMethod=test_interactive_startup_failure_diagnosis>

    def setUp(self):
        """测试前准备"""
        # 自动创建最小化配置文件
        config_file = Path.home() / '.remote-terminal' / 'config.yaml'
        config_file.parent.mkdir(parents=True, exist_ok=True)
        if not config_file.exists():
            config_file.write_text('servers: {}\n', encoding='utf-8')
        # 同步创建项目根目录 config/servers.local.yaml
        import os
        project_root = Path(__file__).parent.parent.parent
        config_dir = project_root / 'config'
        config_dir.mkdir(parents=True, exist_ok=True)
        servers_local = config_dir / 'servers.local.yaml'
        servers_local.write_text('servers: {}\n', encoding='utf-8')
>       self.config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x106117d30>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
_ TestInteractiveStartupRequirement.test_interactive_startup_with_minimal_params _

self = <python.tests.tool_connect_server.test_fix_interactive_startup_requirement_20241222.TestInteractiveStartupRequirement testMethod=test_interactive_startup_with_minimal_params>

    def setUp(self):
        """测试前准备"""
        # 自动创建最小化配置文件
        config_file = Path.home() / '.remote-terminal' / 'config.yaml'
        config_file.parent.mkdir(parents=True, exist_ok=True)
        if not config_file.exists():
            config_file.write_text('servers: {}\n', encoding='utf-8')
        # 同步创建项目根目录 config/servers.local.yaml
        import os
        project_root = Path(__file__).parent.parent.parent
        config_dir = project_root / 'config'
        config_dir.mkdir(parents=True, exist_ok=True)
        servers_local = config_dir / 'servers.local.yaml'
        servers_local.write_text('servers: {}\n', encoding='utf-8')
>       self.config_manager = EnhancedConfigManager()

python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <config_manager.main.EnhancedConfigManager object at 0x1061a0280>
config_path = None, force_interactive = False

    def __init__(self, config_path: str = None, force_interactive: bool = False):
        # 兼容str和Path
        if config_path is not None and not isinstance(config_path, Path):
            config_path = Path(config_path)
        self.config_path = config_path if config_path else Path.home() / '.remote-terminal' / 'config.yaml'
        self.is_mcp_mode = (os.environ.get('MCP_MODE') == '1' or not sys.stdout.isatty())
        if force_interactive:
            self.is_mcp_mode = False
        self.io = self  # 兼容老用法
        self.ia = self  # 兼容老用法
>       force_interactive = kwargs.get('force_interactive', None)
E       NameError: name 'kwargs' is not defined

python/config_manager/main.py:29: NameError
=========================== short test summary info ============================
FAILED python/tests/tool_connect_server/test_end_to_end.py::TestEndToEndWorkflow::test_complete_server_setup_workflow
FAILED python/tests/tool_connect_server/test_end_to_end.py::TestEndToEndWorkflow::test_docker_setup_workflow
FAILED python/tests/tool_connect_server/test_end_to_end.py::TestEndToEndWorkflow::test_mcp_integration_workflow
FAILED python/tests/tool_connect_server/test_end_to_end.py::TestUserScenarios::test_configuration_migration_scenario
FAILED python/tests/tool_connect_server/test_end_to_end.py::TestUserScenarios::test_multiple_servers_scenario
FAILED python/tests/tool_connect_server/test_end_to_end.py::TestUserScenarios::test_new_user_setup_scenario
FAILED python/tests/tool_connect_server/test_end_to_end.py::TestErrorHandling::test_invalid_config_handling
FAILED python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py::TestInteractiveStartupRequirement::test_create_server_config_must_start_interactive_interface
FAILED python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py::TestInteractiveStartupRequirement::test_interactive_startup_failure_diagnosis
FAILED python/tests/tool_connect_server/test_fix_interactive_startup_requirement_20241222.py::TestInteractiveStartupRequirement::test_interactive_startup_with_minimal_params
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 10 failures !!!!!!!!!!!!!!!!!!!!!!!!!!
================== 10 failed, 26 passed, 17 warnings in 2.64s ==================
